inside C:\kafka
Start zookeeper-server --> .\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties
start kafka-server --> .\bin\windows\kafka-server-start.bat .\config\server.properties

inside C:\kafka\bin\windows
getting list of commands that can be applied --> .\kafka-topics.bat --help
creating a topic in kafka in --> .\kafka-topics.bat --create --bootstrap-server localhost:9092 --topic sample_topic

describe a topic --> .\kafka-topics.bat --describe --bootstrap-server localhost:9092 --topic sample_topic
O/p :-
Topic: sample_topic     TopicId: KvaepsVMR1OlbClbV7g8sg PartitionCount: 1       ReplicationFactor: 1    Configs:
        Topic: sample_topic     Partition: 0    Leader: 0       Replicas: 0     Isr: 0

If there are n-partitions, there will be n queues. And every node will have same number of partitions.

Nodes/ Broker/ Bootstrap-server are not slaves or master. Partitions are slaves and master. There can only be one leader
partition at a time.

If we have 2 brokers and n number of partitions, kafka will ensure that 1st broker has (n/2 +- 1) partitions which are
leaders and 2nd broker has (n/2 +-1) partitions which are leaders.

command to create partitions --> .\kafka-topics.bat --create --bootstrap-server localhost:9092  --partitions 3 --topic sample_topic_partition

describe command of topic created with partition -->  .\kafka-topics.bat --describe --bootstrap-server localhost:9092 --topic sample_topic_partition
                 Topic: sample_topic_partition   TopicId: xY7nv39lR6K2pN_ag14z_w PartitionCount: 3       ReplicationFactor: 1    Configs:
                         Topic: sample_topic_partition   Partition: 0    Leader: 0       Replicas: 0     Isr: 0
                         Topic: sample_topic_partition   Partition: 1    Leader: 0       Replicas: 0     Isr: 0
                         Topic: sample_topic_partition   Partition: 2    Leader: 0       Replicas: 0     Isr: 0

One partition will have messages from one topic only.

Note (For one consumer group)
1. If number of consumers are less than number of partitions, then some consumers need to read from multiple partitions.
2. If number of consumers are more than number of partitions, then some consumers (difference of consumers and partitions)
   will remain idle.

Therefore, # consumers in a consumer group <= # partitions.

If we have one kafka server running, we cannot execute the command :-
.\kafka-topics.bat --create --bootstrap-server localhost:9092  --partitions 3  --replication-factor 2 --topic sample_topic_partition
as for one broker, there cannot be more than one replication. Replication factor should not be more than available brokers.

We can run n number of kafka servers on one machine. For doing so we have to do following things.
1. Make a copy of server.properties to server(num).properties. (num is the number of copy created)
2. Open server(num).properties and make 3 changes :-
    i) change default port number from 9092 by adding it in Socket Server Settings.
   ii) change broker-id from 0 to num (num is the number of copy created) in Server Basics
  iii) change the log.dirs in Log Basics by adding new logs' directory. This logs directory is different for different servers.

After doing this, we have to run a new kafka server with command .\bin\windows\kafka-server-start.bat .\config\server(num).properties
and now after new node is up we can execute
.\kafka-topics.bat --create --bootstrap-server localhost:9092  --partitions 3 --replication-factor 2 --topic sample_topic_partition_rf
for creating with 2 replicas and 3 partitions.

On describing the above topic with command :- .\kafka-topics.bat --describe --bootstrap-server localhost:9092 --topic sample_topic_partition_rf
Topic: sample_topic_partition_rf        TopicId: 5XORh2WXSaOrsp4oAkeO0Q PartitionCount: 3       ReplicationFactor: 2    Configs:
        Topic: sample_topic_partition_rf        Partition: 0    Leader: 1       Replicas: 1,0   Isr: 1,0
        Topic: sample_topic_partition_rf        Partition: 1    Leader: 0       Replicas: 0,1   Isr: 0,1
        Topic: sample_topic_partition_rf        Partition: 2    Leader: 1       Replicas: 1,0   Isr: 1,0

We see that leaders are distributed among nodes. For one node 2 partitions are leaders and for other node, one partition is
leader.

Isr stands for in-sync replica. If the slave has replicated the entire data present in master, then it is known as
in-sync replica otherwise it is out-of-sync replica. out-of-sync replica can also give stale data.

If a node goes down before replication of data, then there will be loss of data at consumer end as consumer always reads
from the leaders and not from the replicas.


producing data from a topic on kafka --> .\kafka-console-producer.bat --broker-list localhost:9092 --topic test
or
 .\kafka-console-producer.bat --bootstrap-server localhost:9092 --topic sample_topic_partition_rf
-------------------------------------------------------------------------------------------------------
Sample Data:

{"Name: "John", "Age":"31", "Gender":"Male"}
{"Name: "Emma", "Age":"27", "Gender":"Female"}
{"Name: "Ronald", "Age":"17", "Gender":"Male"}
---------------------------------------------------------------------------------------------------------

Listening from a kafka consumer --> .\kafka-console-consumer.bat --topic sample_topic_partition_rf --bootstrap-server localhost:9092 --from-beginning
Whenever we create a console consumer without any group, by default kafka creates a consumer-group and attaches this consumer
to that group.

If we create a new consumer and attach it to new group and open it in two simultaneous windows of terminal, only one will
receive message along with the terminal window which is standalone. This is because, from one partition only one consumer
in a consumer group can consume.

command to see which group listens from which partitions:-
.\kafka-consumer-groups.bat --bootstrap-server localhost:9092 --group g1 --describe --members

GROUP           CONSUMER-ID                                           HOST            CLIENT-ID        #PARTITIONS
g1              console-consumer-1d937fa0-c33f-41ab-b83d-329f7835c9e6 /192.168.2.97   console-consumer 2
g1              console-consumer-6075ed60-9743-4b2b-96a0-d350a55ae173 /192.168.2.97   console-consumer 1

For every data, kafka has a default retention time of 168 hours. It is mentioned in server.properties.
Consumer connects with kafka and polls from the server.

Consumer keeps track of the last message read with the help of offset. Each partition consumer combination will maintain
its own offset.

Consumer committed offset --> Keeps track of last message committed.
Consumer current offset --> Keeps track of last message read.

current offset is maintained by kafka at zookeeper level for a particular consumer

stopping kafka server --> .\bin\windows\kafka-server-stop.bat .\config\server.properties

stopping zookeeper-server --> .\bin\windows\zookeeper-server-stop.bat .\config\zookeeper.properties

--------------------------------------------------------------------------------------------------------