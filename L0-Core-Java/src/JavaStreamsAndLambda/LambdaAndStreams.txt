Lambda Expressions are anonymous functions. These functions do not need a name or a class to be used. Lambda expressions are
added in Java 8. Lambda expressions basically express instances of functional interfaces (An interface with a single abstract
method is called functional interface. An example is java.lang.Runnable). Lambda expressions implement only one abstract function
and therefore implement functional interfaces. Predicate interface is an example of a functional interface which has only one
abstract method called test().

interface Predicate
{
    ......
    abstract boolean test(T t)
}

The above is a functional interface which has one abstract method test receiving only one parameter of type T and returns a
boolean value. This method is a generic method which takes a type parameter. This interface can be implemented anywhere in a
program using a lambda expression instead of creating classes with multiple functions. For eg, to implement a runnable interface
used only for multithreading one needs to implement only a run() method. Then there is the comparable interface which can be
implemented using compare() method.

Important points:

1. The body of a lambda expression can contain zero, one or more statements.
2. When there is a single statement curly brackets are not mandatory and the return type of the anonymous function is the
   same as that of the body expression.
3. When there are more than one statement, then these must be enclosed in curly brackets (a code block) and the return type of the
   anonymous function is the same as the type of the value returned within the code block, or void if nothing is returned.

Streams

Introduced in Java 8, the Stream API is used to process collections of objects. A stream is a sequence of objects that supports
various methods which can be pipelined to produce the desired result.
The features of Java stream are –
1. A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
2. Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
3. Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be
   pipelined. Terminal operations mark the end of the stream and return the result.

Benefits of using Stream:

1. No Storage
2. Pipeline of Functions
3. Laziness
4. Can be infinite
5. Can be parallelized
6. Can be created from collections, arrays, Files Lines, Methods in Stream, IntStream etc.


